name: Update version, build & publish CocktailBerry images
run-name: "Version: ${{ github.event.release.tag_name }}, build and publish images"
on:
  release:
    types: [published]

jobs:
  update-version:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ github.ref_name }}  # This refers to the branch/tag associated with the release
          fetch-depth: 0  # Fetch full history to allow branch operations

      - name: Extract version from release tag
        id: get_version
        run: |
          # Extract the version from the tag and remove the "v"
          VERSION="${{ github.event.release.tag_name }}"
          VERSION=${VERSION#v}
          echo "version=${VERSION}" >> $GITHUB_OUTPUT

      - name: Update version in src/__init__.py
        run: |
          sed -i "s/__version__ = \".*\"/__version__ = \"${{ steps.get_version.outputs.version }}\"/" src/__init__.py

      - name: Update version in pyproject.toml
        run: |
          sed -i "/^version = \".*\"$/s/version = \".*\"/version = \"${{ steps.get_version.outputs.version }}\"/" pyproject.toml

      - name: Update version in uv.lock for cocktailberry
        run: |
          sed -i "/name = \"cocktailberry\"/,/version = \".*\"/ s/version = \".*\"/version = \"${{ steps.get_version.outputs.version }}\"/" uv.lock

      - name: Commit changes
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          # Create a new branch
          BRANCH_NAME="update-version-${{ github.event.release.tag_name }}"
          git checkout -b $BRANCH_NAME
          # Check if there are any changes to commit
          if git diff --quiet; then
            echo "No changes to commit"
          else
            git commit -am "Update version to ${{ github.event.release.tag_name }}"
            git push origin $BRANCH_NAME
            # Create a pull request
            gh pr create --title "Update version to ${{ github.event.release.tag_name }}" --body "This PR updates the version to ${{ github.event.release.tag_name }}" --head $BRANCH_NAME --base master
          fi

  build-and-push-image:
    runs-on: ubuntu-latest
    needs: update-version
    strategy:
      fail-fast: false
      matrix:
        include:
          - dockerfile: ./microservice/Dockerfile
            image: andrewo92/cocktailberry-microservice
            context: ./microservice
          - dockerfile: ./dashboard/backend/Dockerfile
            image: andrewo92/cocktailberry-dashboard-be
            context: ./dashboard/backend
          - dockerfile: ./dashboard/frontend/Dockerfile
            image: andrewo92/cocktailberry-dashboard-fe
            context: ./dashboard/frontend
    permissions:
      contents: read
      packages: write

    steps:
      - name: ‚§µÔ∏è Check out code from GitHub
        uses: actions/checkout@v4

      - name: üê≥ Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: üê≥ Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: üê≥ Log in to the Container registry
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: ‚õèÔ∏è Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ matrix.image }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}

      - name: üç∏ Build and push Docker image CocktailBerry
        uses: docker/build-push-action@v5
        with:
          context: ${{ matrix.context }}
          file: ${{ matrix.dockerfile }}
          platforms: linux/amd64,linux/arm64,linux/arm/v7
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          no-cache: true
